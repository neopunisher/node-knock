{
  "name": "tldtools",
  "description": "Extracts a domain into its component parts (node-url wrapper), performs domain inspection functions",
  "version": "0.0.9",
  "maintainers": [
    {
      "name": "Michael Pearson",
      "email": "npm@m.bip.io"
    }
  ],
  "main": "./index",
  "engines": {
    "node": ">= 0.4.0"
  },
  "dependencies": {
    "request": ">= 2.2.9"
  },
  "keywords": [
    "domain",
    "tld",
    "extract",
    "parse",
    "subdomain",
    "domain tools",
    "whois"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/mjpearson/node-tldtools.git"
  },
  "readme": "# tldtools\n\nThis module provides TLD domain extraction and resolution services.\n\n## Installation\n\n    npm install tldtools\n\n## Usage\n\n    var tldtools = require('tldtools').init();\n\nor\n\n    var tldtools = require('tldtools');\n    tldtools.init(function() {\n        console.log('success!');\n    });\n\n## TLD List Caching Notes and Operation\n\n  The first time tldtools is loaded it will attempt to call out to `http://mxr.mozilla.org/mozilla/source/netwerk/dns/src/effective_tld_names.dat?raw=1`\nto retrieve the latest TLD list.  This file is parsed, normalised and stored in `/.tlds`.  To override this outbound call and look locally, place your\nown overriding file in `/effective_tld_names.dat`\n\nTo force a cache refresh of TLD data in your own running application, you must provide a hook which calls `tldtools.tldCacheRefresh`\n\n### tldtools.extract(fqdn)\n\nExtracts tld, domain and subdomain parts from the provided fqdn (supports FQDNs names and URIs).\n\nBased on John Kurkowski's tldextract python library. https://github.com/john-kurkowski/tldextract\n\nReturns an object keyed by\n\n* tld - top level domain (com, gov.uk etc)\n* domain - first subdomain of tld\n* subdomain - prefixing A records for domain/tld\n* url_tokens - node-url meta structure (convenience)\n* inspect.useful() - closure reporting whether domain and tld parsed correctly\n* inspect.getDomain() - string concatenation of domain + tld\n\neg:\n\n    var tldtools = require('tldtools');\n    console.log(tldtools.extract('http://bob:funk@wagga.wagga.funkjazz.gov.au:1234/?go=abc&123'));\n\nReturns...\n\n    { subdomain: 'wagga.wagga',\n      domain: 'funkjazz',\n      tld: 'gov.au',\n      url_tokens:\n       { protocol: 'http:',\n         slashes: true,\n         auth: 'bob:funk',\n         host: 'bob:funk@wagga.wagga.funkjazz.gov.au:1234',\n         port: '1234',\n         hostname: 'wagga.wagga.funkjazz.gov.au',\n         href: 'http://bob:funk@wagga.wagga.funkjazz.gov.au:1234/?go=abc&123',\n         search: '?go=abc&123',\n         query: 'go=abc&123',\n         pathname: '/' },\n      inspect: { useful: [Function], getDomain: [Function] } }\n\n### tldtools.tldCacheRefresh(onSuccess, onFail)\n\nRebuilds the local in-memory cache from either the remote TLD datasource, or a local copy of `effective_tld_names.dat` if the local copy exists.\n\n* onSuccess - success callback `function()`\n* onFail - failure callback `function(errorMessage)`\n\n\n### tldtools.whois(fqdn, opts = {});\n\nAttempts to perform a whois lookup for the provided fqdn (supprts FQDNs and URI's)\n\nAvailable options (opts)\n\n* hostName - whois hostname (default whois.internic.net)\n* port - whois port (default 43)\n* stream_encoding - return encoding (default 'utf8')\n* onSuccess - request complete callback `function(whoisData, fqdn, cbPassthrough)`\n* onFail - failure callback `function(errorMessage, fqdn, cbPassthrough)` failure callback\n* cbPassthrough - any extra passthrough parameters to onSuccess or onFail\n\neg:\n\n    tldtools.whois(\n        'github.com',\n        {\n            'onSuccess' : function(whoisData, fqdn, cbPassthrough) {\n                console.log(whoisData);\n                console.log(fqdn + ' ultimate success!');\n                console.log(cbPassthrough);\n            },\n            'onFail' : function(errorMessage, fqdn, cbPassthrough) {\n                console.log(errorMessage);\n                console.log(fqdn + ' WHOIS FAILED');\n                console.log(cbPassthrough);\n            }\n        },\n        'cbPassthrough' : ['some data']\n    });",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mjpearson/node-tldtools/issues"
  },
  "homepage": "https://github.com/mjpearson/node-tldtools",
  "_id": "tldtools@0.0.9",
  "dist": {
    "shasum": "6b3b820d8f50eb1c83c6f9550ce2bf8a981601bf"
  },
  "_from": "tldtools@*",
  "_resolved": "https://registry.npmjs.org/tldtools/-/tldtools-0.0.9.tgz"
}
